package BLEScut;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import BLEScut.Beacon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BEACON.
*/
public class BeaconDao extends AbstractDao<Beacon, Long> {

    public static final String TABLENAME = "BEACON";

    /**
     * Properties of entity Beacon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProximityUuid = new Property(1, String.class, "proximityUuid", false, "PROXIMITY_UUID");
        public final static Property Major = new Property(2, String.class, "major", false, "MAJOR");
        public final static Property Minor = new Property(3, String.class, "minor", false, "MINOR");
        public final static Property Longitude = new Property(4, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(5, String.class, "latitude", false, "LATITUDE");
        public final static Property UniqueId = new Property(6, String.class, "uniqueId", false, "UNIQUE_ID");
        public final static Property ImageUrl = new Property(7, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Description = new Property(9, String.class, "description", false, "DESCRIPTION");
        public final static Property Content = new Property(10, String.class, "content", false, "CONTENT");
        public final static Property Subscriptions_count = new Property(11, String.class, "subscriptions_count", false, "SUBSCRIPTIONS_COUNT");
        public final static Property IsSubscripted = new Property(12, boolean.class, "isSubscripted", false, "IS_SUBSCRIPTED");
    };


    public BeaconDao(DaoConfig config) {
        super(config);
    }
    
    public BeaconDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BEACON' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PROXIMITY_UUID' TEXT," + // 1: proximityUuid
                "'MAJOR' TEXT," + // 2: major
                "'MINOR' TEXT," + // 3: minor
                "'LONGITUDE' TEXT," + // 4: longitude
                "'LATITUDE' TEXT," + // 5: latitude
                "'UNIQUE_ID' TEXT," + // 6: uniqueId
                "'IMAGE_URL' TEXT," + // 7: imageUrl
                "'NAME' TEXT," + // 8: name
                "'DESCRIPTION' TEXT," + // 9: description
                "'CONTENT' TEXT," + // 10: content
                "'SUBSCRIPTIONS_COUNT' TEXT," + // 11: subscriptions_count
                "'IS_SUBSCRIPTED' INTEGER NOT NULL );"); // 12: isSubscripted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BEACON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Beacon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String proximityUuid = entity.getProximityUuid();
        if (proximityUuid != null) {
            stmt.bindString(2, proximityUuid);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(3, major);
        }
 
        String minor = entity.getMinor();
        if (minor != null) {
            stmt.bindString(4, minor);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(5, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(6, latitude);
        }
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(7, uniqueId);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(8, imageUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(10, description);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(11, content);
        }
 
        String subscriptions_count = entity.getSubscriptions_count();
        if (subscriptions_count != null) {
            stmt.bindString(12, subscriptions_count);
        }
        stmt.bindLong(13, entity.getIsSubscripted() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Beacon readEntity(Cursor cursor, int offset) {
        Beacon entity = new Beacon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // proximityUuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // major
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // minor
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // longitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // latitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uniqueId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imageUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // description
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // content
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // subscriptions_count
            cursor.getShort(offset + 12) != 0 // isSubscripted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Beacon entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProximityUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMajor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMinor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUniqueId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImageUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDescription(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSubscriptions_count(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsSubscripted(cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Beacon entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Beacon entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
